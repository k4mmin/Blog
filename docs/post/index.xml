<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kammin</title>
    <link>https://k4mmin.github.io/blog/post/index.xml</link>
    <description>Recent content in Posts on Kammin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jul 2018 20:41:27 +0200</lastBuildDate>
    <atom:link href="https://k4mmin.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Análisis de vulnerabilidades en Docker: CoreOS Clair y Clair-scanner</title>
      <link>https://k4mmin.github.io/blog/post/Analisis-vulnerabilidades-Docker/</link>
      <pubDate>Wed, 11 Jul 2018 20:41:27 +0200</pubDate>
      
      <guid>https://k4mmin.github.io/blog/post/Analisis-vulnerabilidades-Docker/</guid>
      <description>

&lt;h2 id=&#34;análisis-de-vulnerabilidades-en-docker&#34;&gt;Análisis de vulnerabilidades en Docker&lt;/h2&gt;

&lt;p&gt;Prueba de concepto sobre el análisis de vulnerabilidades en imágenes docker&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://k4mmin.github.io/blog/static/images/docker-secure-or-not.jpg&#34; alt=&#34;Docker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;En este primer post sobre seguridad en contenedores voy a crear un tutorial básico de cómo analizar una imagen docker usando &lt;a href=&#34;https://github.com/coreos/clair&#34;&gt;CoreOS Clair&lt;/a&gt; y &lt;a href=&#34;https://github.com/arminc/clair-scanner&#34;&gt;Clair-scanner&lt;/a&gt;. En artículos futuros lo integraremos en un entorno de CI/CD.&lt;/p&gt;

&lt;p&gt;El entorno está creado por contenedores para no necesitar instalaciones/dependencias y se compone de:
+ Base de datos PostgreSQL para almacenar la información de las vulnerabilidades (CVE).
+ Servicio Clair que analiza las capas que componen la imagen docker.
+ Cliente Clair-scanner que manda las tareas de análisis a Clair y devuelve el resultado.&lt;/p&gt;

&lt;p&gt;La limitación de esta herramienta es que trabaja a nivel de paquetería, lo que instalados a mano como los tarballs no será comprobado.&lt;/p&gt;

&lt;p&gt;Pasos a seguir para levantar el escenario:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/k4mmin/docker-clair-scanner.git docker-clair-scanner
cd $_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usar la última release de &lt;a href=&#34;https://github.com/coreos/clair/releases&#34;&gt;Clair&lt;/a&gt;(consultar el enlace para modificar al valor correcto) y añadir la contraseña de la base de datos (por defecto &amp;lsquo;password&amp;rsquo;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export POSTGRES_PASSWORD=&amp;quot;ola&amp;quot;
sed &amp;quot;s/clair:v2.0.1/clair:v2.0.3/&amp;quot; -i docker-compose.yml &amp;amp;&amp;amp; \
sed &amp;quot;s/password=password/password=${POSTGRES_PASSWORD:-password}/&amp;quot; -i clair_config/config.yaml &amp;amp;&amp;amp; \
sed &amp;quot;s/POSTGRES_PASSWORD: password/POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}/&amp;quot; -i docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Levantar la base de datos y poblarla.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d postgres

curl -L https://gist.githubusercontent.com/BenHall/34ae4e6129d81f871e353c63b6a869a7/raw/5818fba954b0b00352d07771fabab6b9daba5510/clair.sql -o clair_config/clair.sql &amp;amp;&amp;amp; \
docker run -it -v $(pwd)/clair_config:/sql/ --network &amp;quot;docker_scan&amp;quot; --link clair_postgres:clair_postgres \
postgres:latest bash -c &amp;quot;PGPASSWORD=${POSTGRES_PASSWORD:-password} psql -h clair_postgres -U postgres &amp;lt; /sql/clair.sql&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Levantar el servidor Clair&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d clair
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Crear la imagen de clair-scanner&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutar clair-scanner con la id de una o varias imágenes docker para obtener el resultado&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source scan.sh &#39;image_id&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejemplo con las imágenes centos:6 y debian:stretch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source scan.sh 70b5d81549ec
2018/07/10 18:51:26 [INFO] ▶ Start clair-scanner
2018/07/10 18:51:31 [INFO] ▶ Server listening on port 9279
2018/07/10 18:51:31 [INFO] ▶ Analyzing 3cdae3dd0537787ca73f7603e5b823f886bff78679a28e53df412cc18f011c23
2018/07/10 18:51:32 [INFO] ▶ Image [70b5d81549ec] contains NO unapproved vulnerabilities
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;source scan.sh 8626492fecd3
[!] scanning debian_stretch
2018/07/11 17:37:28 [INFO] ▶ Start clair-scanner
2018/07/11 17:37:29 [INFO] ▶ Server listening on port 9279
2018/07/11 17:37:29 [INFO] ▶ Analyzing e7faacaf1878064b6a1a48940d41f684aef4f57c98f8c213c85e3bbb1829356d
2018/07/11 17:37:29 [WARN] ▶ Image [8626492fecd3] contains 6 total vulnerabilities
2018/07/11 17:37:29 [ERRO] ▶ Image [8626492fecd3] contains 6 unapproved vulnerabilities
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| STATUS     | CVE SEVERITY              | PACKAGE NAME | PACKAGE VERSION | CVE DESCRIPTION                                            |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| Unapproved | High CVE-2017-12424       | shadow       | 1:4.4-4.1       | In shadow before 4.5, the newusers tool could be           |
|            |                           |              |                 | made to manipulate internal data structures in ways        |
|            |                           |              |                 | unintended by the authors. Malformed input may lead        |
|            |                           |              |                 | to crashes (with a buffer overflow or other memory         |
|            |                           |              |                 | corruption) or other unspecified behaviors. This           |
|            |                           |              |                 | crosses a privilege boundary in, for example, certain      |
|            |                           |              |                 | web-hosting environments in which a Control Panel allows   |
|            |                           |              |                 | an unprivileged user account to create subaccounts.        |
|            |                           |              |                 | https://security-tracker.debian.org/tracker/CVE-2017-12424 |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| Unapproved | Medium CVE-2016-10228     | glibc        | 2.24-11+deb9u3  | The iconv program in the GNU C Library (aka glibc or       |
|            |                           |              |                 | libc6) 2.25 and earlier, when invoked with the -c option,  |
|            |                           |              |                 | enters an infinite loop when processing invalid multi-byte |
|            |                           |              |                 | input sequences, leading to a denial of service.           |
|            |                           |              |                 | https://security-tracker.debian.org/tracker/CVE-2016-10228 |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| Unapproved | Medium CVE-2017-12132     | glibc        | 2.24-11+deb9u3  | The DNS stub resolver in the GNU C Library (aka            |
|            |                           |              |                 | glibc or libc6) before version 2.26, when EDNS             |
|            |                           |              |                 | support is enabled, will solicit large UDP responses       |
|            |                           |              |                 | from name servers, potentially simplifying off-path        |
|            |                           |              |                 | DNS spoofing attacks due to IP fragmentation.              |
|            |                           |              |                 | https://security-tracker.debian.org/tracker/CVE-2017-12132 |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| Unapproved | Low CVE-2017-15670        | glibc        | 2.24-11+deb9u3  | The GNU C Library (aka glibc or libc6) before 2.27         |
|            |                           |              |                 | contains an off-by-one error leading to a heap-based       |
|            |                           |              |                 | buffer overflow in the glob function in glob.c,            |
|            |                           |              |                 | related to the processing of home directories              |
|            |                           |              |                 | using the ~ operator followed by a long string.            |
|            |                           |              |                 | https://security-tracker.debian.org/tracker/CVE-2017-15670 |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| Unapproved | Negligible CVE-2017-7246  | pcre3        | 2:8.39-3        | Stack-based buffer overflow in the pcre32_copy_substring   |
|            |                           |              |                 | function in pcre_get.c in libpcre1 in PCRE 8.40            |
|            |                           |              |                 | allows remote attackers to cause a denial of               |
|            |                           |              |                 | service (WRITE of size 268) or possibly have               |
|            |                           |              |                 | unspecified other impact via a crafted file.               |
|            |                           |              |                 | https://security-tracker.debian.org/tracker/CVE-2017-7246  |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
| Unapproved | Negligible CVE-2017-11164 | pcre3        | 2:8.39-3        | In PCRE 8.41, the OP_KETRMAX feature in the match function |
|            |                           |              |                 | in pcre_exec.c allows stack exhaustion (uncontrolled       |
|            |                           |              |                 | recursion) when processing a crafted regular expression.   |
|            |                           |              |                 | https://security-tracker.debian.org/tracker/CVE-2017-11164 |
+------------+---------------------------+--------------+-----------------+------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta herramienta puede ser muy útil para ser integrada en el desarrollo de nuestros contenedores y para conocer qué imágenes base pueden resultar más seguras.&lt;/p&gt;

&lt;h4 id=&#34;otras-herramientas-relacionadas&#34;&gt;Otras herramientas relacionadas&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/assessing-the-state-current-container-security/&#34;&gt;https://thenewstack.io/assessing-the-state-current-container-security/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web scrapping with python</title>
      <link>https://k4mmin.github.io/blog/post/Web-scrapping-Redmine/</link>
      <pubDate>Tue, 03 Jul 2018 23:12:04 +0200</pubDate>
      
      <guid>https://k4mmin.github.io/blog/post/Web-scrapping-Redmine/</guid>
      <description>

&lt;h2 id=&#34;web-scrapping-redmine-activity&#34;&gt;Web scrapping Redmine activity&lt;/h2&gt;

&lt;h3 id=&#34;what&#34;&gt;what?&lt;/h3&gt;

&lt;p&gt;Ejemplo de web scrapping en una web con https y atenticación usando python y xpath&lt;/p&gt;

&lt;p&gt;Vamos a hacer login en redmine, recojer la session  y recorrer el html de la pestaña actividad de redmine para obtener los tickets sobre los que imputar las horas y lanzarlos en pestañas del navegador.&lt;/p&gt;

&lt;h3 id=&#34;why&#34;&gt;why?&lt;/h3&gt;

&lt;p&gt;Un dia normal de curro. Tareas por aquí, correos por ayá, miro la hora y hay que imputar el tiempo de las tareas realizadas. ¿Es que eso no puede hacerlo otro?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://k4mmin.github.io/blog/static/images/homer_for_president.jpg&#34; alt=&#34;Simspsons&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Para facilitar el registro diario de horas en redmine voy a crear un pequeño script para ahorrar algo de tiempo y de camino repasar algunos conceptos como el uso de xpath.&lt;/p&gt;

&lt;p&gt;Cuando tengo un rato libre le doy un repaso a la &lt;a href=&#34;http://www.redmine.org/projects/redmine/wiki/Rest_api&#34;&gt;api de redmine&lt;/a&gt; pero en este caso no podemos acceder a la pestaña actividad desde esta. Si no existe la herramienta pues la creamos. Why not?&lt;/p&gt;

&lt;h3 id=&#34;how&#34;&gt;How?&lt;/h3&gt;

&lt;p&gt;Para realizar web scrapping el primer paso es ir a la página para comprobar dónde está la información que queremos obtener y en nuestro caso cómo es el proceso que lleva a esta. Tenemos una página con autenticación y https. Los pasos que tiene que seguir el programa son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obtener el html de la página de login con una peticion GET&lt;/li&gt;
&lt;li&gt;Mandar en una petición POST el formulario de login relleno&lt;/li&gt;
&lt;li&gt;Una vez realizado el login correctamente guardar las cookies de la sesión generada en el sitio&lt;/li&gt;
&lt;li&gt;Realizar las consultas a la página con peticiones GET que contenga la información con los datos de la sesión obtenidas&lt;/li&gt;
&lt;li&gt;Tratar esa información&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estos tres primeros pasos podemos resumirlos si queremos centrarnos en el scrapping haciendo uso de las herramientas de desarrolladores de los navegadores Chrome o Firefox. Si hacemos login manualmente en la página desde la pestaña &amp;lsquo;Network&amp;rsquo; del navegador podemos obtener las cookies de sesión en forma de consulta curl y lanzarla en python con la librería &amp;lsquo;os&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://k4mmin.github.io/blog/static/images/Chrome.png&#34; alt=&#34;curl&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;curl=&#39;&#39;&#39;curl &#39;https://redmine.empresa.com/activity?&amp;amp;show_issues=1&amp;amp;user_id=3333&#39; -H &#39;User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Mobile Safari/537.36&#39; -H &#39;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&#39; -H &#39;Cache-Control: max-age=0&#39; -H &#39;Cookie: _redmine_session=BAh7Ckkimuchasletrasynumerosdemaneraaleatoria946d49c7&#39; -H &#39;Connection: keep-alive&#39; --compressed --cacert certificate.pem &amp;gt; redmine_activity.html&#39;&#39;&#39;

os.system(curl)

with open(r&#39;redmine_activity.html&#39;,&#39;r&#39;) as file:
    page = file.read()
tree = lxml.html.fromstring(page)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usando la librería &amp;lsquo;requests&amp;rsquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests, lxml.html

login_url=&#39;https://redmine.empresa.com/login&#39;
cert=&#39;certificate.pem&#39;
username=&#39;MiUsuario&#39;
password=&#39;MiContraseña&#39;

# hacer login y obtener la sesión con las cookies necesarias
def request_session(login_url,username,password,cert):
    session = requests.session()
    try:
        login = session.get(login_url, verify=cert)
    except requests.exceptions.RequestException as e:
        print e
        return none
    login_html = lxml.html.fromstring(login.text)
    hidden_inputs = login_html.xpath(r&#39;//form//input[@type=&amp;quot;hidden&amp;quot;]&#39;)
    form = {x.attrib[&amp;quot;name&amp;quot;]: x.attrib[&amp;quot;value&amp;quot;] for x in hidden_inputs}
    form[&#39;username&#39;] = username
    form[&#39;password&#39;] = password
    try:
        response = session.post(login_url, verify=cert, data=form)
        print response.status_code
        if response.status_code == 200:
            return session
    except requests.exceptions.RequestException as e:
        print e
        return none

s=request_session(login_url,username,password,cert)

# consulta de la página específica con la información a tratar
payload = {&#39;show_issues&#39;: &#39;1&#39;, &#39;user_id&#39;: &#39;1605&#39;}
r = s.get(&#39;https://redmine.empresa.com/activity&#39;, params=payload, verify=&#39;certificate.pem&#39;)

# In [26]: print r.status_code
# 200

tree = lxml.html.fromstring(r.text)
activity = tree.xpath(&#39;//div[@id]/h3|//dl&#39;)

question = raw_input(&amp;quot;open today&#39;s tasks in firefox?: [y/n]&amp;quot;)
if question == &#39;y&#39;:
    firefox=True

tasks_list=[]
for day in activity:
    if day.tag == &#39;h3&#39;:
        day_text = day.text
        # print day_text
    elif day.tag == &#39;dl&#39;:
        tasks = day.findall(&amp;quot;dt[@class=&#39;issue-edit  me&#39;]/a&amp;quot;)
        # print tasks
        for task in tasks:
            task_text = task.text
            # print task_text
            task_url = &#39;https://redmine.empresa.com&#39;+str(task.attrib)[10:-2]
            # print task_url
            if day_text == &#39;Hoy&#39; and firefox:
                # print task_url
                tasks_list.append(task_url)

if question == &#39;y&#39;:
  for elem in set(tasks_list):
    os.system(&#39;firefox %s&#39; %(elem))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con esto se abre en pestañas de firefox todos los tickets que hemos modificado hoy.
A partir de aquí podemos ir explorando funcionalidades u otras partes de la web, por ejemplo abrir directamente la página donde imputar las horas (es necesario obtener el html de las urls del paso anterior)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re

for elem in tasks_list:
  r = s.get(elem, verify=&#39;certificate.pem&#39;)
  tree = lxml.html.fromstring(r.text)
  parent_task = tree.xpath(&#39;&#39;&#39;//div[@id=&#39;relations&#39;]/form/table[@class=&amp;quot;list issues&amp;quot;]/tr/td[@class=&#39;subject&#39;]/a&#39;&#39;&#39;)
  # extraer numeros de un string a una lista con expresiones regulares
  task_num = map(int, re.findall(&#39;\d+&#39;, parent_task[0].text))

  url = &#39;https://redmine.empresa.com/issues/%d/time_entries/new&#39; %(task_num[0])
  os.system(&#39;firefox %s&#39; %(url))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y eso es todo, próximamente comentaré un poco la sintaxis de xpath y refactorizaré el código python que pueda volver a necesitar.&lt;/p&gt;

&lt;h3 id=&#34;notas&#34;&gt;Notas&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Certificados&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dependiendo del certificado usado por el sitio web nos devolverá este error o no.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SSLError: HTTPSConnectionPool(host=&#39;redmine.empresa.com&#39;, port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(1, u&#39;[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)&#39;),))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Muchos certificados usados por los navegadores no están disponibles en el sistema (para usar estos en request exportar REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt). En este caso la solución fué descargar los certificados desde el navegador web y crear una cadena de certificados con ellos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://k4mmin.github.io/blog/static/images/certs.png&#34; alt=&#34;certificados&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat COMODO.ca COMODO.ca2 &amp;gt; certificate.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Curl request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para usar la consulta curl obtenida desde las &amp;lsquo;developers tools&amp;rsquo; he tenido que añadir al final el certificado con &amp;lsquo;&amp;ndash;cacert certificado.pem&amp;rsquo; y eliminar algunos headers.&lt;/p&gt;

&lt;h3 id=&#34;referencias-usadas&#34;&gt;Referencias usadas&lt;/h3&gt;

&lt;p&gt;De mi profesor &lt;a href=&#34;https://twitter.com/Pledin_JD&#34;&gt;@Pledin_JD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.josedomingo.org/pledin/2015/01/trabajar-con-ficheros-xml-desde-python_1/&#34;&gt;https://www.josedomingo.org/pledin/2015/01/trabajar-con-ficheros-xml-desde-python_1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sobre Xpath&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://xpather.com/&#34;&gt;http://xpather.com/&lt;/a&gt;
&lt;a href=&#34;http://xmltoolbox.appspot.com/xpath_generator.html&#34;&gt;http://xmltoolbox.appspot.com/xpath_generator.html&lt;/a&gt;
&lt;a href=&#34;https://www.w3schools.com/xml/xpath_syntax.asp&#34;&gt;https://www.w3schools.com/xml/xpath_syntax.asp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Python request con autenticación&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://brennan.io/2016/03/02/logging-in-with-requests/&#34;&gt;https://brennan.io/2016/03/02/logging-in-with-requests/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hello Hugo</title>
      <link>https://k4mmin.github.io/blog/post/hello-Hugo/</link>
      <pubDate>Sat, 23 Jun 2018 13:33:04 +0200</pubDate>
      
      <guid>https://k4mmin.github.io/blog/post/hello-Hugo/</guid>
      <description>&lt;p&gt;prueba de nuevo post&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>